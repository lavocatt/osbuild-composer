// Package v2 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions struct {
	Region string                    `json:"region"`
	S3     AWSUploadRequestOptionsS3 `json:"s3"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	Ec2    AWSUploadRequestOptionsEc2 `json:"ec2"`
	Region string                     `json:"region"`
	S3     AWSUploadRequestOptionsS3  `json:"s3"`
}

// AWSUploadRequestOptionsEc2 defines model for AWSUploadRequestOptionsEc2.
type AWSUploadRequestOptionsEc2 struct {
	AccessKeyId       *string   `json:"access_key_id,omitempty"`
	SecretAccessKey   *string   `json:"secret_access_key,omitempty"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	SnapshotName      *string   `json:"snapshot_name,omitempty"`
}

// AWSUploadRequestOptionsS3 defines model for AWSUploadRequestOptionsS3.
type AWSUploadRequestOptionsS3 struct {
	AccessKeyId     *string `json:"access_key_id,omitempty"`
	Bucket          string  `json:"bucket"`
	SecretAccessKey *string `json:"secret_access_key,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {

	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	Location string `json:"location"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema

	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	ImageStatus ImageStatus `json:"image_status"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages     *[]string     `json:"packages,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Code        string `json:"code"`
	OperationId string `json:"operation_id"`
	Reason      string `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {

	// Name of an existing STANDARD Storage class Bucket.
	Bucket string `json:"bucket"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region *string `json:"region,omitempty"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     string        `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	Repositories  []Repository  `json:"repositories"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       ImageStatusValue `json:"status"`
	UploadStatus *UploadStatus    `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// List of ImageStatusValue
const (
	ImageStatusValue_building    ImageStatusValue = "building"
	ImageStatusValue_failure     ImageStatusValue = "failure"
	ImageStatusValue_pending     ImageStatusValue = "pending"
	ImageStatusValue_registering ImageStatusValue = "registering"
	ImageStatusValue_success     ImageStatusValue = "success"
	ImageStatusValue_uploading   ImageStatusValue = "uploading"
)

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	Ref *string `json:"ref,omitempty"`
	Url *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`
	ServerUrl     string `json:"server_url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{} `json:"options"`
	Status  string      `json:"status"`
	Type    UploadTypes `json:"type"`
}

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// List of UploadTypes
const (
	UploadTypes_aws    UploadTypes = "aws"
	UploadTypes_aws_s3 UploadTypes = "aws.s3"
	UploadTypes_azure  UploadTypes = "azure"
	UploadTypes_gcp    UploadTypes = "gcp"
)

// User defines model for User.
type User struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference
	// Embedded fields due to inline allOf schema
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {

	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /compose/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /compose/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set("Bearer.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set("Bearer.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/compose", wrapper.PostCompose)
	router.GET("/compose/:id", wrapper.GetComposeStatus)
	router.GET("/compose/:id/metadata", wrapper.GetComposeMetadata)
	router.GET("/errors", wrapper.GetErrorList)
	router.GET("/errors/:id", wrapper.GetError)
	router.GET("/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"i7rgvSM1gzR75uis79b/HwAA//9CASwl50EAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
